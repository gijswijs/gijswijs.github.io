<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Neumann SSG test]]></title><description><![CDATA[A demonstration static site built using Neumann SSG]]></description><link>https://gijswijs.github.io</link><generator>metalsmith-feed</generator><lastBuildDate>Mon, 15 Feb 2021 13:20:13 GMT</lastBuildDate><atom:link href="https://gijswijs.github.io/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Super easy tip for slide animation with Pandoc and reveal.js]]></title><description><![CDATA[<p>I found this super easy alternative way to animate your slides with reveal.js that works out of the box with Markdown and Pandoc. Here is how to do it.</p>]]></description><link>https://gijswijs.github.io/posts/pandoc-revealjs-animation</link><guid isPermaLink="true">https://gijswijs.github.io/posts/pandoc-revealjs-animation</guid><pubDate>Mon, 15 Feb 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Running c-lightning in Simverse with plugins]]></title><description><![CDATA[<p>The goal is to run c-lightning with plugins in a local testing cluster. For my cluster I use <a href="https://github.com/darwin/simverse">Simverse</a>.
Simverse allows for additional command line arguments to be passed to <code>lightningd</code>, so it should be possible to run <code>lightningd</code> with the <code>plugin</code> argument.</p>
<p>Let&#39;s first clone our plugin. We will be using one of the plugins that are available through Lightningd on Github.</p>
<pre><code>cd ~\simverse\_repos
git clone https://github.com/lightningd/plugins.git --depth 1</code></pre><p>We put the plugin in the <code>_repos</code> folder, because it is assumed that the plugin is there when the cluster is being build. (Also: throughout this article we assume your simverse folder is inside your home folder. If that is not the case, adjust it accordingly)</p>
<p>Since all nodes in Simverse run inside Docker containers, that plugin-file should be made available inside the Docker context folder. The <code>_repos</code> folder is not part of that context (each container gets its own context) so we have to copy the file from the <code>_repos</code> folder to the Docker context folder. Luckily Simverse works with the concept of recipes. A recipe describes how your cluster should look like. A recipe is a bash script that uses a library called cookbook that can be used to build your cluster step-by-step. Since it is &quot;just&quot; a bash script, you can do anything bash can do to tweak your cluster.</p>
<p>We will create a recipe that creates a cluster with three c-lightning nodes, running on a bitcoind back-end. </p>]]></description><link>https://gijswijs.github.io/posts/running-c-lightning-simverse-plugins</link><guid isPermaLink="true">https://gijswijs.github.io/posts/running-c-lightning-simverse-plugins</guid><pubDate>Wed, 02 Dec 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[SSH keybased authentication Windows to Linux]]></title><description><![CDATA[<p>I do most of my development on a remote machine. The machine isn&#39;t <em>that</em> remote, it&#39;s a mini-pc running Ubuntu that is standing right here on my desk. It has no peripherals, so I have to do all my development remotely through my Windows 10 laptop.</p>
<p>Remote development with Vscode is amazing. It just works. Once you are set up, there&#39;s no difference with working locally. To have that seamless experience you do have to set up keybased authentication for SSH. If you don&#39;t you will be constantly reminded of working remotely, because you have to type in the password of the remote machine.</p>]]></description><link>https://gijswijs.github.io/posts/ssh-keybased-authentication-windows-to-linux</link><guid isPermaLink="true">https://gijswijs.github.io/posts/ssh-keybased-authentication-windows-to-linux</guid><pubDate>Fri, 20 Nov 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Debugging LND while running a local cluster]]></title><description><![CDATA[<p>If you want to debug LND, or if you want to take a real deep dive into LND, you probably want to be able to set breakpoints in the source code to see what is actually happening. Not only that, you also want to have the node run in a local cluster of other nodes, so that you can perform some real Lightning actions like opening a channel and make payments. This post takes you through the setup I use based on <a href="https://github.com/go-delve/delve">Delve</a> and <a href="https://github.com/darwin/simverse">Simverse</a>.</p>]]></description><link>https://gijswijs.github.io/posts/debugging-lnd</link><guid isPermaLink="true">https://gijswijs.github.io/posts/debugging-lnd</guid><pubDate>Mon, 16 Nov 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Janos 0.1 is now public]]></title><description><![CDATA[<p>Janos is a static site generator operating fully in the browser. It uses Metalsmith with a bit of Webpack magic springled on top, to make it all work inside a browser. It is tightly integrated with Github to automaticaly host your site, using Github pages.</p>]]></description><link>https://gijswijs.github.io/posts/metalsmith-release</link><guid isPermaLink="true">https://gijswijs.github.io/posts/metalsmith-release</guid><pubDate>Tue, 06 Oct 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[How to make a website with NeumannSsg]]></title><description><![CDATA[<p>NeumannSsg is a static site generator. What makes NeumannSsg different is that it is comes with free hosting, using Github Pages, and browser based content management. The only thing you need is a free account at Github and you are up and running in less than 5 minutes.</p>]]></description><link>https://gijswijs.github.io/posts/new-post</link><guid isPermaLink="true">https://gijswijs.github.io/posts/new-post</guid><pubDate>Wed, 17 Jun 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[The static site generator with built in CMS]]></title><description><![CDATA[<p>NeumannSsg is a static site generator with a web based, built in CMS.</p>]]></description><link>https://gijswijs.github.io/posts/second-post</link><guid isPermaLink="true">https://gijswijs.github.io/posts/second-post</guid><pubDate>Tue, 16 Jun 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[My Fourth Post]]></title><description><![CDATA[<p>Hello, Newman!!!</p>]]></description><link>https://gijswijs.github.io/posts/fourth-post</link><guid isPermaLink="true">https://gijswijs.github.io/posts/fourth-post</guid><pubDate>Fri, 03 May 2019 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Bitcoin Core On Windows 10]]></title><description><![CDATA[<p>I&#39;ve been following Bitcoin and more importantly the Blockchain from the sidelines for a few years now, but I wanted to get my hands dirty. Obviously I could just download the Bitcoin Core executables from bitcoin.org, but I always feel it gives me more insight if I build something myself. Also it&#39;s was a nice test case for Bash on Windows.</p>]]></description><link>https://gijswijs.github.io/posts/first-post</link><guid isPermaLink="true">https://gijswijs.github.io/posts/first-post</guid><pubDate>Fri, 03 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Bitcoin Core On Windows 10]]></title><description><![CDATA[<p>I&#39;ve been following Bitcoin and more importantly the Blockchain from the sidelines for a few years now, but I wanted to get my hands dirty. Obviously I could just download the Bitcoin Core executables from bitcoin.org, but I always feel it gives me more insight if I build something myself. Also it&#39;s was a nice test case for Bash on Windows.</p>]]></description><link>https://gijswijs.github.io/posts/building-bitcoin-core-windows-10</link><guid isPermaLink="true">https://gijswijs.github.io/posts/building-bitcoin-core-windows-10</guid><pubDate>Fri, 03 Nov 2017 00:00:00 GMT</pubDate></item></channel></rss>

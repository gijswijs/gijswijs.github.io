<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gijs van Dam on privacy, programming and crypto research]]></title><description><![CDATA[Personal website of Gijs van Dam. Topics: privacy, programming, cryptography and cryptocurrencies, open source and web technologies.]]></description><link>https://www.gijsvandam.nl</link><generator>metalsmith-feed</generator><lastBuildDate>Fri, 26 Feb 2021 08:18:32 GMT</lastBuildDate><atom:link href="https://www.gijsvandam.nl/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Measuring your writing progress with a git word count.]]></title><description><![CDATA[<p>Writing a scientific paper is hard. Doing your PhD is hard. Writing your thesis is hard. And to make me feel even more miserable I decided to measure my progress by counting the nett change in words I achieve throughout each day.
I am by no means a productivity guru and I don&#39;t know whether word count is a useful indicator for measuring the progress of a paper. That being said, it is a reality check to see how fast my  work is progressing.
So without further ado here&#39;s the Powershell command that outputs the wordcount for the last 25 days based on git commits.</p>
<pre><code class="language-powershell">for($i = 0; $i -lt 25; $i++){$j = $i + 1; Write-Host (get-date (get-date).addDays(-$i) -UFormat &quot;%Y%m%d&quot;) ((git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;   -- &quot;***.md&quot;| Select-String -Pattern &quot;^\+.*&quot; | Measure-Object -word | select -ExpandProperty Words) - (git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;  -- &quot;***.md&quot;| Select-String -Pattern &quot;^-.*&quot; | Measure-Object -word | select -ExpandProperty Words)) }</code></pre>
<h2 id="what-does-it-do">What does it do?</h2>
<p>At the core of this script is the following git command:</p>
<pre><code>git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;   -- &quot;***.md&quot;</code></pre><p>This command uses <code>git diff</code> (duh!) with the <code>--word-diff</code> option which marks the actual word being changed instead of the entire line that contains it. The latter is the default behavior of <code>git diff</code> and is not what we want when performing a word count. <code>porcelain</code> denotes the special line-based format for <code>word-diff</code> meant for script consumption, which is what we will do next. <code>-- &quot;***.md&quot;</code> only considers markdown files which are the files that contain all the content of my paper in <a href="https://github.com/neumannjs/boilerplate-paper">Boilerplate Paper</a>. It is important to note that if you don&#39;t commit regularly (at least daily) this word count doesn&#39;t come up with accurate data.</p>
<p>If you run only this command, you would get something like this.</p>
<pre><code>~
diff --git a/e-diff-paper/paper/03_method.md b/e-diff-paper/paper/03_method.md
index a3b4dfe..c4a565c 100644
--- a/e-diff-paper/paper/03_method.md
+++ b/e-diff-paper/paper/03_method.md
@@ -1,8 +1,8 @@
 # Method
~

~
 Our goal is to obtain differential privacy for the balance of a Lightning Network payment channel. This goal differs from the original setting of differential privacy. Originally differential privacy
-was
  meant to ensure that adding or deleting a record
-from
+in
  a database did not change the answer to statistical differential private queries significantly. To achieve that, noise is added to the query answer. By observing this noisy answer 
-a passive
+an
  observer is unable to discern if a specific record is in the database or not, regardless of the information this observer possesses about the other records in the database. This adding of noise is done through a probabilistic algorithm applied to the data set contained in the database.
~

~
 Our case is different in a consequential way. A passive observer can use a BDA again and again to get a reading on the balance. The information that this observer obtains is comparable to a stream of data. To cater to our situation we expand the basic definition of (approximate) differential privacy to 
-streams
+streams,
  similarly to [@Chan2011].</code></pre><p>Those lines starting with <code>-</code> or <code>+</code> are the ones we are interested in, because those are the words that have been deleted and added. We pipe the results of that command into <code>Select-String</code> which is kind of like grep for Powershell.</p>
<pre><code>Select-String -Pattern &quot;^\+(?!\+\+\s).*&quot;</code></pre><p>The regex pattern matches with all lines starting with <code>+</code> except if it is followed by <code>++</code> (we use the negative lookahead to check for that) because the three plus-signs are use to indicate file names that have additions, not the addition itself. If you run the above two commands piped together you would get a result like this:</p>
<pre><code>+#
+## Just-In-Time Routing
+Just-in-time routing or JIT routing [@Pickhardt2019] was proposed as a solution to mitigate routing failures due to insufficient funds. LN uses source based routing, where the send 
er of the payment has to guess the route over which to send a payment. Since a node is only aware of the balances of channels that it is part of, a sender node can only guess if a r
oute with other channels has enough liquidity to process the payment. This can lead to relatively large amounts of failed payments due to insufficient funds somewhere along the rout 
e.
+JIT Routing tries to make the routing process more like best effort routing known in IP-forwarding. The concept depends on nodes quickly rebalancing their channels upon receiving a
 routing request (HTLC) for which they have insufficient funds. Because a node along the route has more knowledge of its local neighborhood than the sender node, it can use that kno
wledge to perform a small transaction within its local neighborhood of channels to rebalance funds in such a way that original routing request can proceed. Given that the rebalancin 
g succeeds within the timeframe of the routing request, the requests now succeeds where it would have failed without JIT routing.
+in
+an
+streams,</code></pre><p>Although there is some Markdown markup that shouldn&#39;t be counted as words (like <code>#</code> and <code>##</code>) this is good enough for my purposes. So we pipe the results into our next two commands.</p>
<pre><code>Measure-Object -word | select -ExpandProperty Words</code></pre><p>These are plain and simple, the first command performs the actual word count, but since Powershell always returns an object, we need the latter command to enumerate the values of the object and select the value. Everything piped together returns just a number.</p>
<pre><code>248</code></pre><p>Now we do the same thing for the deleted words. We run the same commands but now with a different regex expression: <code>Select-String -Pattern &quot;^\-(?!\-\-\s).*&quot;</code></p>
<p>We substract the deleted words from the added words and we have our nett change in words for the day. All that is left to do is to wrap everything in a loop that goes back as much days as you want (25 in the above script) and outputs the date with the word count for that date.</p>
<p>So this is my progress for the past few days of a particular paper I am writing:</p>
<pre><code>20210226 237
20210225 0
20210224 0
20210223 0
20210222 0
20210221 0
20210220 0
20210219 0
20210218 591
20210217 190
20210216 332
20210215 0
20210214 0
20210213 0
20210212 0
20210211 925
20210210 0
20210209 382</code></pre><p>I was just busy with other things, OK!</p>
]]></description><link>https://www.gijsvandam.nl/posts/measuring-writing-progress-with-word-count</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/measuring-writing-progress-with-word-count</guid><pubDate>Fri, 26 Feb 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Pandoc-filter for highlighting comments in LaTeX output]]></title><description><![CDATA[<p>While writing my papers I try not to get bogged down too much. So if a paragraph doens&#39;t flow right I just type <code>TODO: rewrite</code> on the line below it, and continue writing. When I think of something that I shouldn&#39;t forget, like an extra analysis to run I just write it down as a todo in the running text of my paper. I also write thoughts on my paper as a todo. Ideas on structure, whether I should maybe rearrange paragraphs or approach a subject differently, it all ends up as a todo in the running text.</p>
<p>When running the VSCode task for converting my paper to PDF (using Pandoc) it puts all the todos into the running text. That&#39;s fine by me, it helps as an extra reminder that stuff still needs to happen. But I wanted the todos to be visually different from the running text, so that it stands apart and doesn&#39;t confuse people who are reading my draft. That is where my Pandoc filter comes into play.</p>]]></description><link>https://www.gijsvandam.nl/posts/pandoc-filter-highligt-comments</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/pandoc-filter-highligt-comments</guid><pubDate>Tue, 23 Feb 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Super easy tip for slide animation with Pandoc and reveal.js]]></title><description><![CDATA[<p>I found this super easy alternative way to animate your slides with reveal.js that works out of the box with Markdown and Pandoc. Here is how to do it.</p>
<p>Last week I had to give a progress presentation about the current state of my PhD, and I can whip those up in no time. I use <a href="https://github.com/neumannjs/boilerplate-paper">Boilerplate Paper</a> not only for writing my papers, but also for presentations like this.</p>
<p>I write the presentation in Markdown and then convert it to <a href="https://revealjs.com">reveal.js</a>. But sometimes you want something else than the default sliding transition that reveal.js provides.</p>]]></description><link>https://www.gijsvandam.nl/posts/pandoc-revealjs-animation</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/pandoc-revealjs-animation</guid><pubDate>Mon, 15 Feb 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Running c-lightning in Simverse with plugins]]></title><description><![CDATA[<p>The goal is to run c-lightning with plugins in a local testing cluster. For my cluster I use <a href="https://github.com/darwin/simverse">Simverse</a>.
Simverse allows for additional command line arguments to be passed to <code>lightningd</code>, so it should be possible to run <code>lightningd</code> with the <code>plugin</code> argument.</p>
<p>Let&#39;s first clone our plugin. We will be using one of the plugins that are available through Lightningd on Github.</p>
<pre><code>cd ~\simverse\_repos
git clone https://github.com/lightningd/plugins.git --depth 1</code></pre><p>We put the plugin in the <code>_repos</code> folder, because it is assumed that the plugin is there when the cluster is being build. (Also: throughout this article we assume your simverse folder is inside your home folder. If that is not the case, adjust it accordingly)</p>
<p>Since all nodes in Simverse run inside Docker containers, that plugin-file should be made available inside the Docker context folder. The <code>_repos</code> folder is not part of that context (each container gets its own context) so we have to copy the file from the <code>_repos</code> folder to the Docker context folder. Luckily Simverse works with the concept of recipes. A recipe describes how your cluster should look like. A recipe is a bash script that uses a library called cookbook that can be used to build your cluster step-by-step. Since it is &quot;just&quot; a bash script, you can do anything bash can do to tweak your cluster.</p>
<p>We will create a recipe that creates a cluster with three c-lightning nodes, running on a bitcoind back-end. </p>]]></description><link>https://www.gijsvandam.nl/posts/running-c-lightning-simverse-plugins</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/running-c-lightning-simverse-plugins</guid><pubDate>Wed, 02 Dec 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[SSH keybased authentication Windows to Linux]]></title><description><![CDATA[<p>I do most of my development on a remote machine. The machine isn&#39;t <em>that</em> remote, it&#39;s a mini-pc running Ubuntu that is standing right here on my desk. It has no peripherals, so I have to do all my development remotely through my Windows 10 laptop.</p>
<p>Remote development with Vscode is amazing. It just works. Once you are set up, there&#39;s no difference with working locally. To have that seamless experience you do have to set up keybased authentication for SSH. If you don&#39;t you will be constantly reminded of working remotely, because you have to type in the password of the remote machine.</p>]]></description><link>https://www.gijsvandam.nl/posts/ssh-keybased-authentication-windows-to-linux</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/ssh-keybased-authentication-windows-to-linux</guid><pubDate>Fri, 20 Nov 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Debugging LND while running a local cluster]]></title><description><![CDATA[<p>If you want to debug LND, or if you want to take a real deep dive into LND, you probably want to be able to set breakpoints in the source code to see what is actually happening. Not only that, you also want to have the node run in a local cluster of other nodes, so that you can perform some real Lightning actions like opening a channel and make payments. This post takes you through the setup I use based on <a href="https://github.com/go-delve/delve">Delve</a> and <a href="https://github.com/darwin/simverse">Simverse</a>.</p>]]></description><link>https://www.gijsvandam.nl/posts/debugging-lnd</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/debugging-lnd</guid><pubDate>Mon, 16 Nov 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Bitcoin Core On Windows 10]]></title><description><![CDATA[<p>I&#39;ve been following Bitcoin and more importantly the Blockchain from the sidelines for a few years now, but I wanted to get my hands dirty. Obviously I could just download the Bitcoin Core executables from bitcoin.org, but I always feel it gives me more insight if I build something myself. Also it&#39;s was a nice test case for Bash on Windows.</p>]]></description><link>https://www.gijsvandam.nl/posts/building-bitcoin-core-windows-10</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/building-bitcoin-core-windows-10</guid><pubDate>Fri, 03 Nov 2017 00:00:00 GMT</pubDate></item></channel></rss>
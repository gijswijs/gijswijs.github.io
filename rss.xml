<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gijs van Dam on privacy, programming and crypto research]]></title><description><![CDATA[Personal website of Gijs van Dam. Topics: privacy, programming, cryptography and cryptocurrencies, open source and web technologies.]]></description><link>https://www.gijsvandam.nl</link><generator>metalsmith-feed</generator><lastBuildDate>Thu, 01 Apr 2021 04:43:36 GMT</lastBuildDate><atom:link href="https://www.gijsvandam.nl/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Image conversion, resizing and compression with WebAssembly]]></title><description><![CDATA[<p>Image conversion and resizing for the web can be quite fiddly. Take responsive websites for instance. You want to show a smaller version of your image on smaller devices: You don&#39;t need to download a 1080px wide image to show on a 360px wide device, especially since that device is likely constrained in the amount of bandwidth it has. Then again when your website is shown on an ultra HD screen with 3840x2160 resolution 1080 is maybe even too small.</p>
<p>Apart from multiple sizes, you also want to offer multiple formats. Modern browsers support new(er) image formats like webp and avif offer better compression for comparable image quality. Using these formats you can decrease the total download size of your page, while improving the overall experience for the user.
But you just can&#39;t assume (yet) that all browsers support those newer formats, so you have to provide older formats as a fallback option. All in all the amount of different files you have to offer for just a single image on a web page starts to become quite large and the whole thing becomes, like I said, fiddly.</p>]]></description><link>https://www.gijsvandam.nl/posts/image-file-conversion-resizing-compression-with-webassembly</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/image-file-conversion-resizing-compression-with-webassembly</guid><pubDate>Wed, 31 Mar 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Measuring your writing progress with a git word count.]]></title><description><![CDATA[<p>Writing a scientific paper is hard. Doing your PhD is hard. Writing your thesis is hard. And to make me feel even more miserable I decided to measure my progress by counting the nett change in words I achieve throughout each day.
I am by no means a productivity guru and I don&#39;t know whether word count is a useful indicator for measuring the progress of a paper. That being said, it is a reality check to see how fast my  work is progressing.
So without further ado here&#39;s the Powershell command that outputs the wordcount for the last 25 days based on git commits.</p>
<pre><code class="language-powershell">for($i = 0; $i -lt 25; $i++){$j = $i + 1; Write-Host (get-date (get-date).addDays(-$i) -UFormat &quot;%Y%m%d&quot;) ((git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;   -- &quot;***.md&quot;| Select-String -Pattern &quot;^\+.*&quot; | Measure-Object -word | select -ExpandProperty Words) - (git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;  -- &quot;***.md&quot;| Select-String -Pattern &quot;^-.*&quot; | Measure-Object -word | select -ExpandProperty Words)) }</code></pre>]]></description><link>https://www.gijsvandam.nl/posts/measuring-writing-progress-with-word-count</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/measuring-writing-progress-with-word-count</guid><pubDate>Fri, 26 Feb 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Pandoc-filter for highlighting to-dos in LaTeX output]]></title><description><![CDATA[<p>While writing my papers I try not to get bogged down too much. So if a paragraph doens&#39;t flow right I just type <code>TODO: rewrite</code> on the line below it, and continue writing. When I think of something that I shouldn&#39;t forget, like an extra analysis to run I just write it down as a todo in the running text of my paper. I also write thoughts on my paper as a todo. Ideas on structure, whether I should maybe rearrange paragraphs or approach a subject differently, it all ends up as a todo in the running text.</p>
<p>When running the VSCode task for converting my paper to PDF (using Pandoc) it puts all the todos into the running text. That&#39;s fine by me, it helps as an extra reminder that stuff still needs to happen. But I wanted the todos to be visually different from the running text, so that it stands apart and doesn&#39;t confuse people who are reading my draft. That is where my Pandoc filter comes into play.</p>]]></description><link>https://www.gijsvandam.nl/posts/pandoc-filter-highligt-comments</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/pandoc-filter-highligt-comments</guid><pubDate>Tue, 23 Feb 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Super easy tip for slide animation with Pandoc and reveal.js]]></title><description><![CDATA[<p>I found this super easy alternative way to animate your slides with reveal.js that works out of the box with Markdown and Pandoc. Here is how to do it.</p>
<p>Last week I had to give a progress presentation about the current state of my PhD, and I can whip those up in no time. I use <a href="https://github.com/neumannjs/boilerplate-paper">Boilerplate Paper</a> not only for writing my papers, but also for presentations like this.</p>
<p>I write the presentation in Markdown and then convert it to <a href="https://revealjs.com">reveal.js</a>. But sometimes you want something else than the default sliding transition that reveal.js provides.</p>]]></description><link>https://www.gijsvandam.nl/posts/pandoc-revealjs-animation</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/pandoc-revealjs-animation</guid><pubDate>Mon, 15 Feb 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Running c-lightning in Simverse with plugins]]></title><description><![CDATA[<p>The goal is to run c-lightning with plugins in a local testing cluster. For my cluster I use <a href="https://github.com/darwin/simverse">Simverse</a>.
Simverse allows for additional command line arguments to be passed to <code>lightningd</code>, so it should be possible to run <code>lightningd</code> with the <code>plugin</code> argument.</p>
<p>Let&#39;s first clone our plugin. We will be using one of the plugins that are available through Lightningd on Github.</p>
<pre><code>cd ~\simverse\_repos
git clone https://github.com/lightningd/plugins.git --depth 1</code></pre><p>We put the plugin in the <code>_repos</code> folder, because it is assumed that the plugin is there when the cluster is being build. (Also: throughout this article we assume your simverse folder is inside your home folder. If that is not the case, adjust it accordingly)</p>
<p>Since all nodes in Simverse run inside Docker containers, that plugin-file should be made available inside the Docker context folder. The <code>_repos</code> folder is not part of that context (each container gets its own context) so we have to copy the file from the <code>_repos</code> folder to the Docker context folder. Luckily Simverse works with the concept of recipes. A recipe describes how your cluster should look like. A recipe is a bash script that uses a library called cookbook that can be used to build your cluster step-by-step. Since it is &quot;just&quot; a bash script, you can do anything bash can do to tweak your cluster.</p>
<p>We will create a recipe that creates a cluster with three c-lightning nodes, running on a bitcoind back-end. </p>]]></description><link>https://www.gijsvandam.nl/posts/running-c-lightning-simverse-plugins</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/running-c-lightning-simverse-plugins</guid><pubDate>Wed, 02 Dec 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[SSH keybased authentication Windows to Linux]]></title><description><![CDATA[<p>I do most of my development on a remote machine. The machine isn&#39;t <em>that</em> remote, it&#39;s a mini-pc running Ubuntu that is standing right here on my desk. It has no peripherals, so I have to do all my development remotely through my Windows 10 laptop.</p>
<p>Remote development with Vscode is amazing. It just works. Once you are set up, there&#39;s no difference with working locally. To have that seamless experience you do have to set up keybased authentication for SSH. If you don&#39;t you will be constantly reminded of working remotely, because you have to type in the password of the remote machine.</p>]]></description><link>https://www.gijsvandam.nl/posts/ssh-keybased-authentication-windows-to-linux</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/ssh-keybased-authentication-windows-to-linux</guid><pubDate>Fri, 20 Nov 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Debugging LND while running a local cluster]]></title><description><![CDATA[<p>If you want to debug LND, or if you want to take a real deep dive into LND, you probably want to be able to set breakpoints in the source code to see what is actually happening. Not only that, you also want to have the node run in a local cluster of other nodes, so that you can perform some real Lightning actions like opening a channel and make payments. This post takes you through the setup I use based on <a href="https://github.com/go-delve/delve">Delve</a> and <a href="https://github.com/darwin/simverse">Simverse</a>.</p>]]></description><link>https://www.gijsvandam.nl/posts/debugging-lnd</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/debugging-lnd</guid><pubDate>Mon, 16 Nov 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Bitcoin Core On Windows 10]]></title><description><![CDATA[<p>I&#39;ve been following Bitcoin and more importantly the Blockchain from the sidelines for a few years now, but I wanted to get my hands dirty. Obviously I could just download the Bitcoin Core executables from bitcoin.org, but I always feel it gives me more insight if I build something myself. Also it&#39;s was a nice test case for Bash on Windows.</p>]]></description><link>https://www.gijsvandam.nl/posts/building-bitcoin-core-windows-10</link><guid isPermaLink="true">https://www.gijsvandam.nl/posts/building-bitcoin-core-windows-10</guid><pubDate>Fri, 03 Nov 2017 00:00:00 GMT</pubDate></item></channel></rss>